{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint constant MINIMUM_USD = 50 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public immutable i_ownerAddress;\n\n    // Get ABI through contract interface\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress){\n        i_ownerAddress = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"Didn't send enough.\");\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function withdrawn() public owner {\n        for(uint256 i; i < funders.length; i++){\n            addressToAmountFunded[funders[i]] = 0;\n        }\n\n        // Reset array\n        funders = new address[](0);\n\n        // \"call method\" â€“ For the most part using call is the recommended way to send and receive ether \n        // call can be used to call virtually any function in all of Ethereum without the abi\n        (bool callStatus, /* bytes memory data */) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callStatus, \"Call failed\");\n    }\n\n    modifier owner {\n        if(msg.sender != i_ownerAddress) {\n            revert NotOwner(); \n        }\n        _; // The underscore is to execute the rest of the function\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        (\n            /* uint80 roundId */,\n            int256 price, // ETH/USD\n            /* uint256 startedAt */,\n            /* uint256 timeStamp */,\n            /* uint80 answeredInRound */\n        ) = priceFeed.latestRoundData();\n\n        uint256 ethAmountInUsd = (uint256(price * 1e10) * ethAmount) / 1e18;\n\n        return ethAmountInUsd;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}